import { 
  createDocument, 
  getDocument, 
  getDocuments, 
  updateDocument,
  deleteDocument 
} from '@/lib/firestore';

// Define vulnerability interface
export interface Screenshot {
  url: string;
  uploadedAt: Date;
}

export interface Vulnerability {
  id?: string;
  subdomainId: string;
  type: string;
  severity: 'Low' | 'Medium' | 'High' | 'Critical';
  status: 'Found' | 'Not Found' | 'Not Yet Done';
  notes: string;
  recreation_steps?: string;
  screenshots: Screenshot[];
  createdAt: Date;
  updatedAt: Date;
}

// Collection name
const COLLECTION_NAME = 'vulnerabilities';

// Vulnerability model methods
export const VulnerabilityModel = {
  // Create a new vulnerability
  async create(vulnerabilityData: Omit<Vulnerability, 'status' | 'notes' | 'recreation_steps' | 'screenshots' | 'createdAt' | 'updatedAt'>): Promise<Vulnerability & { id: string }> {
    const now = new Date();
    const vulnerability: Vulnerability = {
      ...vulnerabilityData,
      status: 'Not Yet Done',
      notes: '',
      recreation_steps: '',
      screenshots: [],
      createdAt: now,
      updatedAt: now
    };
    
    const id = await createDocument<Vulnerability>(COLLECTION_NAME, vulnerability);
    return { id, ...vulnerability };
  },
  
  // Get a vulnerability by ID
  async findById(id: string): Promise<(Vulnerability & { id: string }) | null> {
    return getDocument<Vulnerability>(COLLECTION_NAME, id);
  },
  
  // Find vulnerabilities by subdomain
  async findBySubdomain(subdomainId: string): Promise<(Vulnerability & { id: string })[]> {
    return getDocuments<Vulnerability>(COLLECTION_NAME, {
      fieldPath: 'subdomainId',
      operator: '==',
      value: subdomainId
    });
  },
  
  // Update a vulnerability
  async update(id: string, vulnerabilityData: Partial<Vulnerability>): Promise<void> {
    const updateData = {
      ...vulnerabilityData,
      updatedAt: new Date()
    };
    
    await updateDocument<Vulnerability>(COLLECTION_NAME, id, updateData);
  },
  
  // Delete a vulnerability
  async delete(id: string): Promise<void> {
    await deleteDocument(COLLECTION_NAME, id);
  }
};

export default VulnerabilityModel; 